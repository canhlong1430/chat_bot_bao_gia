from flask import Blueprint, request, jsonify, current_app
from services.product_service import ProductService
from services.template_service import TemplateService
import os
import re

chat_bp = Blueprint("chat", __name__)

@chat_bp.route("/chat", methods=["POST"])
def chat():
    data = request.json
    message = data.get("message", "")

    matches = re.findall(r'/sp\s*:\s*(.+?)\s*/sl\s*:\s*(\d+)', message, re.I)
    print("üêû matches =", matches)

    if not matches:
        return jsonify({"error": "Sai c√∫ ph√°p!"}), 400

    # ‚úÖ Lu√¥n truy·ªÅn file path th·ª±c t·∫ø
    ps = ProductService(os.path.join(
        current_app.config["UPLOAD_FOLDER"], "products.xlsx"
    ))

    items = []
    for sp_name, sl in matches:
        sp_name = sp_name.strip()
        sl = int(sl)
        sp_data = ps.find_product_detail(sp_name)

        if not sp_data:
            return jsonify({"error": f"Kh√¥ng t√¨m th·∫•y SP: {sp_name}"}), 404

        unit = sp_data.get('ƒêvt')

        # ∆Øu ti√™n l·∫•y l·∫ßn l∆∞·ª£t: 'Gi√° b√°n' ‚Üí 'Gi√° b√°n C1' ‚Üí 'Gi√° b√°n c·∫•p 1'
        price = (
            sp_data.get('Gi√° b√°n')
            or sp_data.get('Gi√° b√°n C1')
            or sp_data.get('Gi√° b√°n c·∫•p 1')
            or None
        )

        if price is None:
            print(f"‚ö†Ô∏è SP '{sp_name}' kh√¥ng c√≥ gi√° ‚ûú ƒê·∫∑t gi√° = None ho·∫∑c 0 theo y√™u c·∫ßu")
            price = 0  # N·∫øu mu·ªën m·∫∑c ƒë·ªãnh gi√° l√† 0 th√¨ b·ªè comment d√≤ng n√†y
        # Gia ban le
        price1 = (
                sp_data.get('Gi√° b√°n l·∫ª')

                or None
        )
        if price1 is None:
            print(f"‚ö†Ô∏è SP '{sp_name}' kh√¥ng c√≥ gi√° ‚ûú ƒê·∫∑t gi√° = None ho·∫∑c 0 theo y√™u c·∫ßu")
            price = 0  # N·∫øu mu·ªën m·∫∑c ƒë·ªãnh gi√° l√† 0 th√¨ b·ªè comment d√≤ng n√†y

        items.append({
            'name': sp_name,
            'quantity': sl,
            'unit': unit,
            'unit_price': price,
            'unit_price1':price1,
            'extra_data': sp_data
        })

    ts = TemplateService(
        current_app.config["TEMPLATE_FOLDER"],
        current_app.config["EXPORT_FOLDER"]
    )

    output_file = ts.export_quote(items)
    return jsonify({"output_file": f"/exports/{output_file}"}), 200
